// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/components.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct MoveIntent {
    // message fields
    pub forward: bool,
    pub backward: bool,
    pub left: bool,
    pub right: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MoveIntent {
    fn default() -> &'a MoveIntent {
        <MoveIntent as ::protobuf::Message>::default_instance()
    }
}

impl MoveIntent {
    pub fn new() -> MoveIntent {
        ::std::default::Default::default()
    }

    // bool forward = 1;


    pub fn get_forward(&self) -> bool {
        self.forward
    }
    pub fn clear_forward(&mut self) {
        self.forward = false;
    }

    // Param is passed by value, moved
    pub fn set_forward(&mut self, v: bool) {
        self.forward = v;
    }

    // bool backward = 2;


    pub fn get_backward(&self) -> bool {
        self.backward
    }
    pub fn clear_backward(&mut self) {
        self.backward = false;
    }

    // Param is passed by value, moved
    pub fn set_backward(&mut self, v: bool) {
        self.backward = v;
    }

    // bool left = 3;


    pub fn get_left(&self) -> bool {
        self.left
    }
    pub fn clear_left(&mut self) {
        self.left = false;
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: bool) {
        self.left = v;
    }

    // bool right = 4;


    pub fn get_right(&self) -> bool {
        self.right
    }
    pub fn clear_right(&mut self) {
        self.right = false;
    }

    // Param is passed by value, moved
    pub fn set_right(&mut self, v: bool) {
        self.right = v;
    }
}

impl ::protobuf::Message for MoveIntent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.forward = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.backward = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.left = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.right = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.forward != false {
            my_size += 2;
        }
        if self.backward != false {
            my_size += 2;
        }
        if self.left != false {
            my_size += 2;
        }
        if self.right != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.forward != false {
            os.write_bool(1, self.forward)?;
        }
        if self.backward != false {
            os.write_bool(2, self.backward)?;
        }
        if self.left != false {
            os.write_bool(3, self.left)?;
        }
        if self.right != false {
            os.write_bool(4, self.right)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MoveIntent {
        MoveIntent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "forward",
                |m: &MoveIntent| { &m.forward },
                |m: &mut MoveIntent| { &mut m.forward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "backward",
                |m: &MoveIntent| { &m.backward },
                |m: &mut MoveIntent| { &mut m.backward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "left",
                |m: &MoveIntent| { &m.left },
                |m: &mut MoveIntent| { &mut m.left },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "right",
                |m: &MoveIntent| { &m.right },
                |m: &mut MoveIntent| { &mut m.right },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MoveIntent>(
                "MoveIntent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MoveIntent {
        static instance: ::protobuf::rt::LazyV2<MoveIntent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MoveIntent::new)
    }
}

impl ::protobuf::Clear for MoveIntent {
    fn clear(&mut self) {
        self.forward = false;
        self.backward = false;
        self.left = false;
        self.right = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MoveIntent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveIntent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Velocity {
    // message fields
    pub velocity_x: f32,
    pub velocity_y: f32,
    pub velocity_z: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Velocity {
    fn default() -> &'a Velocity {
        <Velocity as ::protobuf::Message>::default_instance()
    }
}

impl Velocity {
    pub fn new() -> Velocity {
        ::std::default::Default::default()
    }

    // float velocity_x = 1;


    pub fn get_velocity_x(&self) -> f32 {
        self.velocity_x
    }
    pub fn clear_velocity_x(&mut self) {
        self.velocity_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_velocity_x(&mut self, v: f32) {
        self.velocity_x = v;
    }

    // float velocity_y = 2;


    pub fn get_velocity_y(&self) -> f32 {
        self.velocity_y
    }
    pub fn clear_velocity_y(&mut self) {
        self.velocity_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_velocity_y(&mut self, v: f32) {
        self.velocity_y = v;
    }

    // float velocity_z = 3;


    pub fn get_velocity_z(&self) -> f32 {
        self.velocity_z
    }
    pub fn clear_velocity_z(&mut self) {
        self.velocity_z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_velocity_z(&mut self, v: f32) {
        self.velocity_z = v;
    }
}

impl ::protobuf::Message for Velocity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.velocity_x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.velocity_y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.velocity_z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.velocity_x != 0. {
            my_size += 5;
        }
        if self.velocity_y != 0. {
            my_size += 5;
        }
        if self.velocity_z != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.velocity_x != 0. {
            os.write_float(1, self.velocity_x)?;
        }
        if self.velocity_y != 0. {
            os.write_float(2, self.velocity_y)?;
        }
        if self.velocity_z != 0. {
            os.write_float(3, self.velocity_z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Velocity {
        Velocity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "velocity_x",
                |m: &Velocity| { &m.velocity_x },
                |m: &mut Velocity| { &mut m.velocity_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "velocity_y",
                |m: &Velocity| { &m.velocity_y },
                |m: &mut Velocity| { &mut m.velocity_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "velocity_z",
                |m: &Velocity| { &m.velocity_z },
                |m: &mut Velocity| { &mut m.velocity_z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Velocity>(
                "Velocity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Velocity {
        static instance: ::protobuf::rt::LazyV2<Velocity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Velocity::new)
    }
}

impl ::protobuf::Clear for Velocity {
    fn clear(&mut self) {
        self.velocity_x = 0.;
        self.velocity_y = 0.;
        self.velocity_z = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Velocity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Velocity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto/components.proto\"l\n\nMoveIntent\x12\x18\n\x07forward\x18\
    \x01\x20\x01(\x08R\x07forward\x12\x1a\n\x08backward\x18\x02\x20\x01(\x08\
    R\x08backward\x12\x12\n\x04left\x18\x03\x20\x01(\x08R\x04left\x12\x14\n\
    \x05right\x18\x04\x20\x01(\x08R\x05right\"g\n\x08Velocity\x12\x1d\n\nvel\
    ocity_x\x18\x01\x20\x01(\x02R\tvelocityX\x12\x1d\n\nvelocity_y\x18\x02\
    \x20\x01(\x02R\tvelocityY\x12\x1d\n\nvelocity_z\x18\x03\x20\x01(\x02R\tv\
    elocityZb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
